package saker.build.ide.intellij.impl.properties;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.EventObject;

public class EnvironmentUserParametersForm {
    private JTabbedPane tabbedPane1;
    private JPanel rootPanel;
    private JTable userParametersTable;
    private JButton addButton;

    public EnvironmentUserParametersForm() {
        $$$setupUI$$$();
        userParametersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        userParametersTable.getColumnModel().setColumnSelectionAllowed(false);
        userParametersTable.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1 = new JTabbedPane();
        rootPanel.add(tabbedPane1,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
                        new Dimension(200, 200), null, 1, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Parameters", panel1);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null,
                        0, false));
        userParametersTable = new JTable();
        userParametersTable.setFillsViewportHeight(true);
        scrollPane1.setViewportView(userParametersTable);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                false));
        addButton = new JButton();
        addButton.setBorderPainted(true);
        addButton.setContentAreaFilled(true);
        addButton.setEnabled(true);
        addButton.setHorizontalAlignment(10);
        addButton.setIcon(new ImageIcon(getClass().getResource("/general/add.png")));
        addButton.setLabel("Add user parameter");
        addButton.setMargin(new Insets(5, 10, 5, 10));
        addButton.setMaximumSize(new Dimension(1000, 30));
        addButton.setPreferredSize(new Dimension(150, 30));
        addButton.setText("Add user parameter");
        addButton.setToolTipText("Add user parameter");
        addButton.setVisible(true);
        panel2.add(addButton);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Extensions", panel3);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public JTable getUserParametersTable() {
        return userParametersTable;
    }

    public JButton getAddButton() {
        return addButton;
    }

}
